---
AWSTemplateFormatVersion: 2010-09-09
Description: 'Spot instances auto-deregister from ECS cluster'

Resources:
  SpotInstanceInterruptionEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Spot Instance Interruption Warning
      EventPattern: 
        source: 
          - "aws.ec2"
        detail-type: 
          - "EC2 Spot Instance Interruption Warning"
      State: "ENABLED"
      Targets:
        - 
          Arn: !GetAtt LambdaFunction.Arn
          Id: "TargetFunctionV1"

  Ec2ScaleinEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: AutoScaling Group Scale in
      EventPattern:
        source:
          - "aws.autoscaling"
        detail-type:
          - "EC2 Instance-terminate Lifecycle Action"
      State: "ENABLED"
      Targets:
        -
          Arn: !GetAtt LambdaFunction.Arn
          Id: "TargetFunctionV1"

  PermissionForSpotInstanceInterruptionEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref LambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt SpotInstanceInterruptionEventRule.Arn

  PermissionForEc2ScaleinEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt Ec2ScaleinEventRule.Arn

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code: 
        ZipFile: |
          import boto3
          import logging
          import os

          region = os.getenv('AWS_DEFAULT_REGION')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          EVENT_TYPE_INTERRUPTION_WARNING = "EC2 Spot Instance Interruption Warning"
          EVENT_TYPE_TERMINATION_LIFECYCLE_ACTION = "EC2 Instance-terminate Lifecycle Action"


          class ECS():

              def __init__(self, region):
                  self.cl = boto3.client('ecs', region_name=region)

              def get_cluster_arns(self):
                  cluster_arns = []
                  res = self.cl.list_clusters(maxResults=100)
                  cluster_arns += res['clusterArns']
                  while True:
                      if 'nextToken' in res:
                          res = self.cl.list_clusters(nextToken=res['nextToken'], maxResults=100)
                          cluster_arns += res['clusterArns']
                      else:
                          break
                  return cluster_arns

              def deregister(self, instance_id):
                  container_instance_arn = None  # default
                  cluster_arns = self.get_cluster_arns()
                  logger.info('Get all ecs clusters')

                  for cluster_arn in cluster_arns:
                      res = self.cl.list_container_instances(
                          cluster=cluster_arn,
                          filter='ec2InstanceId=={}'.format(instance_id),
                          maxResults=1,
                      )
                      if len(res['containerInstanceArns']) == 1:
                          container_instance_arn = res['containerInstanceArns'][0]
                          logger.info(f'{instance_id} is used in {cluster_arn}, deregistering')
                          res = self.cl.deregister_container_instance(
                              cluster=cluster_arn,
                              containerInstance=container_instance_arn,
                              force=True
                          )
                          logger.info(res)
                      else:
                          logger.debug(f'{instance_id} is not used in {cluster_arn}')
                  if not container_instance_arn:
                      logger.warning(f'{instance_id} is not used in all ecs clusters')


          def handler(event, context):
              if event['detail-type'] == EVENT_TYPE_INTERRUPTION_WARNING:
                  instance_id = event['detail']['instance-id']
                  logger.info(f'{instance_id} will be terminated in 2 minutes because of spot instance interruption.')
              elif event['detail-type'] == EVENT_TYPE_TERMINATION_LIFECYCLE_ACTION:
                  instance_id = event['detail']['EC2InstanceId']
                  logger.info(f'{instance_id} will be terminated because of scale in.')
              else:
                  logger.error(f'Unknown event type: {event}')
                  return
              ecs = ECS(region)
              ecs.deregister(instance_id)

      Runtime: "python3.6"
      Timeout: "10"

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies: 
        - 
          PolicyName: "ecsDeregisterContainerInstance"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - 
                Effect: "Allow"
                Action: "ecs:ListClusters"
                Resource: "*"
              - 
                Effect: "Allow"
                Action: "ecs:ListContainerInstances"
                Resource: !Sub "arn:aws:ecs:${AWS::Region}:*:cluster/*"
              - 
                Effect: "Allow"
                Action: "ecs:DeregisterContainerInstance"
                Resource: !Sub "arn:aws:ecs:${AWS::Region}:*:cluster/*"

